function makePlotsFromCVSfiles(params)

% function to make plots from CSV files generated by EM Clustering
% Module. The input params passes the required parameters to the function:
%  params.fileDir             location where CSV files are stored
%  params.filePrefix          files' prefix
%  params.clusterIds          cluster Ids for which plots need to be generated

% The following optinal parameters can also be specified:
%  params.NAval               the integer value by which the missing data
%                             is represented (default -1)
%  params.sm                  smoothing factor which is applied to the
%                             plotted curves (default 5)

% Mahnaz Maddah, 2009.

params.NAval = -1;   % what represents missing data
params.sm = 5;       % smoothing factor

%%%%%
fileDir = params.fileDir;
filePrefix = params.filePrefix;
clusterIds = params.clusterIds;
NAval = params.NAval;
sm = params.sm;

if ~strcmp('/',fileDir(end))
    fileDir = [fileDir,'/'];
end

for k= 1:length(clusterIds)

    figure('Name',sprintf('Diffusion parameters versus normalized arc length for cluster %d',k),'NumberTitle','off')
    [FA] = load([fileDir, filePrefix,sprintf('_FA_cluster%d.csv',clusterIds(k))]);           %NxS
    [MD] = load([fileDir, filePrefix,sprintf('_MD_cluster%d.csv',clusterIds(k))]);           %NxS
    [parDiff] = load([fileDir, filePrefix,sprintf('_ParDiff_cluster%d.csv',clusterIds(k))]); %NxS
    [preDiff] = load([fileDir, filePrefix,sprintf('_PreDiff_cluster%d.csv',clusterIds(k))]); %NxS

    data =cell(4);
    data{1} = FA;
    data{2} = MD;
    data{3} = parDiff;
    data{4} = preDiff;

    plot4ScalarMeasures(data,sm,NAval);
end
end

function c = smooth(varargin)
%Smooths data by moving average method.
y = varargin{1};
y = y(:);   % make it a column

span = [];
if nargin > 1
    span = varargin{2};
end
if isempty(span)
    span = 5;
end

span = floor(span);
n = length(y);
span = min(span,n);
w = span-1+mod(span,2); % make it odd
if w==1,
    c = y;
    return;
end

c = filter(ones(w,1)/w,1,y);
cbegin = cumsum(y(1:w-2));
cbegin = cbegin(1:2:end)./(1:2:(w-2))';
cend = cumsum(y(n:-1:n-w+3));
cend = cend(end:-2:1)./(w-2:-2:1)';
c = [cbegin;c(w:end);cend];
end

function plot4ScalarMeasures(alldata,sm,NAval)
% This function makes a single figure with four subplots of diffusion
% scalar measures, 'FA', 'MD','Parallel Diffusion' and 'Perpendicular
% Diffusion', stored in the fisrt input argument of this function.
% Features are smoothed to the extent specified by the second input.

features = [{'FA'},{'MD'},{'Parallel Diffusion'}, {'Perpendicular Diffusion'}];
for d=1:4
    data = alldata{d};
    for j=1:size(data,2)
        nonzero = find(data(:,j)~= NAval);
        data_mean(j) = mean(data(nonzero,j));
        data_std(j) = std(data(nonzero,j));
    end

    %remove the zero columns:
    nanelements = find(isnan(data_mean));
    %fprintf('Number of zero columns is %d \n', length(nanelements));
    data_mean(nanelements)=[];
    data_std(nanelements)=[];

    N = length(data_mean);
    subplot(2,2,d)
    plot(smooth(data_mean,sm),'r','LineWidth',2);hold on
    plot(smooth(data_mean+data_std,sm),'--b','LineWidth',2);
    plot(smooth(data_mean-data_std,sm),'--b','LineWidth',2);
    set(gca,'XTick',0:N/2:N)
    set(gca,'XTickLabel',{'0', '0.5','1'});
    ylabel(features(d))
    xlim([0 N]);
    %    ylim([xmin xmax]);
    %    title('');

end
end
